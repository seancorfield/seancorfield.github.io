<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | An Architect's View]]></title>
  <link href="http://corfield.org/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://corfield.org/"/>
  <updated>2019-07-04T10:41:51-07:00</updated>
  <id>http://corfield.org/</id>
  <author>
    <name><![CDATA[Sean Corfield]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Next.JDBC Release Candidate 1]]></title>
    <link href="http://corfield.org/blog/2019/06/04/next-jdbc/"/>
    <updated>2019-06-04T11:30:00-07:00</updated>
    <id>http://corfield.org/blog/2019/06/04/next-jdbc</id>
    <content type="html"><![CDATA[<h1>seancorfield/next.jdbc 1.0.0-rc1</h1>

<p><code>next.jdbc</code> &ndash; the &ldquo;next generation&rdquo; of <code>clojure.java.jdbc</code> &ndash; is a modern Clojure wrapper for JDBC. The first Release Candidate is now available to test &ndash; containing only accretive and fixative changes from Beta 1. The API should be considered stable enough for production usage.</p>

<p><a href="https://cljdoc.org/d/seancorfield/next.jdbc/1.0.0-rc1/doc/readme">https://cljdoc.org/d/seancorfield/next.jdbc/1.0.0-rc1/doc/readme</a></p>

<p>The focus of this release is providing more flexibility in result set builders, so that it is easier to implement your own naming strategies, via new builders that accept <code>:label-fn</code> and <code>:qualifier-fn</code> options. These mirror the <code>:column-fn</code> and <code>:table-fn</code> options used in <code>next.jdbc.sql</code> &ndash; which are updated versions of <code>clojure.java.jdbc</code>&rsquo;s <code>:entities</code> option. These new builder options are updated versions of <code>clojure.java.jdbc</code>&rsquo;s <code>:identifiers</code> option.</p>

<h2>Changes since Beta 1</h2>

<ul>
<li>Fix #24 by adding return type hints to <code>next.jdbc</code> functions.</li>
<li>Fix #22 by adding <code>next.jdbc.optional</code> with six map builders that omit <code>NULL</code> columns from the row hash maps.</li>
<li>Documentation improvements (#27, #28, and #29), including changing &ldquo;connectable&rdquo; to &ldquo;transactable&rdquo; for the <code>transact</code> function and the <code>with-transaction</code> macro (for consistency with the name of the underlying protocol).</li>
<li>Fix #30 by adding <code>modified</code> variants of column name functions and builders. The <code>lower</code> variants have been rewritten in terms of these new <code>modified</code> variants. This adds <code>:label-fn</code> and <code>:qualifier-fn</code> options that mirror <code>:column-fn</code> and <code>:table-fn</code> for row builders.</li>
</ul>


<p>Please take it for a test drive and let me know if you run into any problems via <a href="https://github.com/seancorfield/next-jdbc/issues">GitHub issues</a> or in the <a href="https://clojurians.slack.com/messages/C1Q164V29/details/"><code>#sql</code> channel on the Clojurians Slack</a> or the <a href="https://clojurians.zulipchat.com/#narrow/stream/152063-sql"><code>#sql</code> stream on the Clojurians Zulip</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next.JDBC Beta 1]]></title>
    <link href="http://corfield.org/blog/2019/05/25/next-jdbc/"/>
    <updated>2019-05-25T08:00:00-07:00</updated>
    <id>http://corfield.org/blog/2019/05/25/next-jdbc</id>
    <content type="html"><![CDATA[<h1>seancorfield/next.jdbc 1.0.0-beta1</h1>

<p><code>next.jdbc</code> &ndash; the &ldquo;next generation&rdquo; of <code>clojure.java.jdbc</code> &ndash; is a modern Clojure wrapper for JDBC. Beta 1 is now available to test &ndash; only accretive and fixative changes will be made from this point on, so the API should be considered stable enough for production usage.</p>

<p><a href="https://cljdoc.org/d/seancorfield/next.jdbc/1.0.0-beta1/doc/readme">https://cljdoc.org/d/seancorfield/next.jdbc/1.0.0-beta1/doc/readme</a></p>

<p>The group and artifact ID will remain <code>seancorfield/next.jdbc</code>, the namespace structure will remain <code>next.jdbc.*</code>. With auto-generated documentation hosted on cljdoc.org and Continuous Integration testing hosted on circleci.com, I have decided to continue work on <code>next.jdbc</code> outside Clojure Contrib, rather than merge it into <code>clojure.java.jdbc</code> as new namespaces there. I have updated the <a href="https://github.com/seancorfield/next-jdbc/blob/master/CONTRIBUTING.md">Contributing page on GitHub</a> to reflect that Pull Requests can now be submitted.</p>

<h2>Changes since Alpha 13</h2>

<ul>
<li>Set up CircleCI testing (just local DBs for now).</li>
<li>Address <a href="https://github.com/seancorfield/next-jdbc/issues/21">#21</a> by adding <code>next.jdbc.specs</code> and documenting basic usage.</li>
<li>Fix <a href="https://github.com/seancorfield/next-jdbc/issues/19">#19</a> by caching loaded database driver classes.</li>
<li>Address <a href="https://github.com/seancorfield/next-jdbc/issues/16">#16</a> by renaming <code>reducible!</code> to <code>plan</code> (this is a <strong>BREAKING CHANGE!</strong> from Alpha 13 &ndash; the naming of this function was the blocker for moving from Alpha to Beta).</li>
<li>Address <a href="https://github.com/seancorfield/next-jdbc/issues/3">#3</a> by deciding to maintain this library outside Clojure Contrib.</li>
</ul>


<p>Please take it for a test drive and let me know if you run into any problems via <a href="https://github.com/seancorfield/next-jdbc/issues">GitHub issues</a> or in the <a href="https://clojurians.slack.com/messages/C1Q164V29/details/"><code>#sql</code> channel on the Clojurians Slack</a> or the <a href="https://clojurians.zulipchat.com/#narrow/stream/152063-sql"><code>#sql</code> stream on the Clojurians Zulip</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next.JDBC]]></title>
    <link href="http://corfield.org/blog/2019/04/21/next-jdbc/"/>
    <updated>2019-04-21T16:00:00-07:00</updated>
    <id>http://corfield.org/blog/2019/04/21/next-jdbc</id>
    <content type="html"><![CDATA[<h1>seancorfield/next.jdbc 1.0.0-alpha8</h1>

<p>I&rsquo;ve talked about this in a few groups &ndash; it&rsquo;s been a long time coming. This is the &ldquo;next generation&rdquo; of <code>clojure.java.jdbc</code> &ndash; a modern wrapper for JDBC, that focuses on <code>reduce</code>/transducers, qualified-keywords, and <code>datafy</code>/<code>nav</code> support (so, yes, it requires Clojure 1.10).</p>

<p><a href="https://cljdoc.org/d/seancorfield/next.jdbc/1.0.0-alpha8/doc/readme">https://cljdoc.org/d/seancorfield/next.jdbc/1.0.0-alpha8/doc/readme</a></p>

<p><em>The next generation of <code>clojure.java.jdbc</code>: a new low-level Clojure wrapper for JDBC-based access to databases.</em>  It&rsquo;s intended to be both faster and simpler than <code>clojure.java.jdbc</code> and it&rsquo;s where I intend to focus my future energy, although I have not yet decided whether it will ultimately be a new set of namespaces in the Contrib lib or a separate, standalone OSS library!</p>

<p>At this point, I&rsquo;m looking for feedback on the API and the approach (as well as bugs, performance issues, etc). Please take it for a spin and let me know what you think via <a href="https://github.com/seancorfield/next-jdbc/issues">GitHub issues</a> or in the <a href="https://clojurians.slack.com/messages/C1Q164V29/details/"><code>#sql</code> channel on the Clojurians Slack</a> or the <a href="https://clojurians.zulipchat.com/#narrow/stream/152063-sql"><code>#sql</code> stream on the Clojurians Zulip</a>.</p>

<p><em>The group/artifact ID will change at some point:</em> and the actual namespaces will too, but I will try to make that as painless as possible when I take this out of the alpha phase.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojurians Slack Alternatives]]></title>
    <link href="http://corfield.org/blog/2019/02/11/clojurians-slack-alternatives/"/>
    <updated>2019-02-11T04:10:00-08:00</updated>
    <id>http://corfield.org/blog/2019/02/11/clojurians-slack-alternatives</id>
    <content type="html"><![CDATA[<p>Daniel Compton has continued his excellent trend of
<a href="https://danielcompton.net/2019/02/06/clojure-survey-2019">writing an analysis of the State of Clojure survey comments</a>
and one of the comments in his <strong>Community</strong> section stood out for me:</p>

<blockquote><p>&ldquo;I suggest moving off of slack to a more accessible chat system. Losing history is a bad thing. Check out discord or matrix or gitter or mattermark or any other number of tools made for this purpose.&rdquo;</p></blockquote>

<!-- more -->


<p>The <a href="https://clojurians.slack.com/">Clojurians Slack</a> <em>[sign up <a href="http://clojurians.net/">here</a>]</em>
started as a small experiment about four years ago and has been far more
successful than anyone could have imagined, with around 15K members signed up
and around 1,700 members considered &ldquo;active&rdquo; on a weekly basis (which means it
would cost almost $9K per month to run this as a paid service!).</p>

<p>A perennial complaint about Slack&rsquo;s free plan is that it limits the accessible
message history to just the most recent 10K messages. In a busy Slack like
Clojurians that limit is hit after three or four days, heavily limiting the
ability to refer back to conversations or to use the massive amount of
&ldquo;knowledge&rdquo; shared there for reference &ndash; exactly as noted in the comment above.</p>

<p>Why that comment inspired me to write this post is that most of the suggested
communities already exist, and have been around for quite some time. Two of
them are linked from the right hand column of the <a href="https://www.reddit.com/r/Clojure/">Clojure sub-Reddit</a>
but here&rsquo;s the list directly:</p>

<ul>
<li><a href="https://discordapp.com/invite/v9QMy9D">Discord</a></li>
<li><a href="https://gitter.im/clojure/general">Gitter</a> &ndash; there are several Clojure rooms on Gitter, most of them are linked to open source projects on GitHub</li>
<li><a href="https://riot.im/app/#/room/#clojure:matrix.org">Matrix/Riot</a></li>
<li>Mattermost &ndash; I&rsquo;m not sure if anyone has set up a Clojure community on Mattermost but several people have advocated for it</li>
</ul>


<p>The &ldquo;original&rdquo; online Clojure community still exists and is still active on IRC
(freenode), of course, and there&rsquo;s also <a href="https://braid.chat/">Braid</a> (written in
Clojure/ClojureScript!).</p>

<p>I was a bit surprised that the commenter did not mention <a href="https://clojurians.zulipchat.com/">Clojurians on Zulip</a>
because that community, started back in early November 2018, already has five hundred
members and seems, to me, like the most capable alternative to Slack. It&rsquo;s open
source, <a href="https://zulipchat.com/for/open-source/">hosted for free to open source communities</a>,
and &ldquo;has a significantly larger and more active development community than other
modern open source group chat solutions like Mattermost, Rocket.Chat, and matrix.org.&rdquo;
Read their <a href="https://zulipchat.com/why-zulip/">Why Zulip? page</a> for more
information about the service and how it compares (specifically to Slack).</p>

<p>One-way bridging between select Slack channels and Zulip streams has been in
place for a while and currently about fifty of the most popular channels on
Slack are available to read in Zulip streams, along with many other active
streams in Zulip. This means you can try Zulip without missing out on Slack
conversations &ndash; some people prefer Zulip&rsquo;s UI just for reading Slack messages!</p>

<p>Clojurians on Slack isn&rsquo;t going away &ndash; a lot of people love the UI and don&rsquo;t
consider the message history limit to be a big deal &ndash; and if you&rsquo;re already
using Slack for work, then it makes perfect sense to also use that for your
Clojure community fix (since you only need one chat client open). The Slack
community isn&rsquo;t &ldquo;official&rdquo; in any way, and you&rsquo;re all welcome to try other
chat clients, but if you feel strongly about open source and unlimited search
history, check out <a href="https://clojurians.zulipchat.com/">Clojurians on Zulip</a>
and if you like it, promote it and encourage other Clojurians to join you
there.</p>

<p>Me? I&rsquo;m one of the long-time admins/moderators of Clojurians on Slack, but I&rsquo;ve
also tried each and every one of the alternatives that various community members
have set up over the last four years. <a href="https://clojurians.zulipchat.com/">Clojurians on Zulip</a>
is the one I&rsquo;ve found myself most active in and the only alternative chat client
that I always have open at this point!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom, Chlorine, and Windows]]></title>
    <link href="http://corfield.org/blog/2019/01/22/atom-chlorine-windows/"/>
    <updated>2019-01-22T12:15:00-08:00</updated>
    <id>http://corfield.org/blog/2019/01/22/atom-chlorine-windows</id>
    <content type="html"><![CDATA[<p>About a month ago, I was <a href="http://corfield.org/blog/2018/12/19/atom-chlorine/">praising Chlorine, the new Clojure package for
Atom</a> and I&rsquo;ve been using
it, day-in, day-out, for all my Clojure development. On a Mac, that&rsquo;s
straightforward because I start a Socket REPL on the Mac and I run Atom on the
Mac so when I connect via Chlorine and issue the <code>Chlorine: Load File</code>
command (via <code>Ctrl-, f</code> in my keymap), it sends <code>(load-file "/path/to/file.clj")</code>
to the REPL, for the file being edited, and that is evaluated and loads the
source from disk and compiles it. On Windows&hellip;<!-- more --> Well, on Windows
there are a few obstacles to this workflow.</p>

<p>The first obstacle (for me) is that <code>clj</code> doesn&rsquo;t run on Windows and that&rsquo;s
what I use for everything Clojure on a Mac and on Linux now. There&rsquo;s a
PowerShell implementation in progress but Windows has always been a bit of a
second-class citizen so it&rsquo;s still a ways off. But Windows has WSL (Windows
Subsystem for Linux) so I can
and do run (user-mode) Ubuntu on my Windows laptop and I do all of my Clojure
work on that&hellip;</p>

<p>&hellip;but that brings the second obstacle: file paths on Windows look like
<code>C:\path\to\file.clj</code> and under WSL they look like <code>/mnt/c/path/to/file.clj</code>.
That means your editor on Windows and your REPL on Linux don&rsquo;t quite speak the
same language.</p>

<p>Fortunately, the latest release of Chlorine, 0.0.8, has a &ldquo;smart&rdquo; <code>Load File</code>
command that will work with both a Windows-based Socket REPL and a WSL-based
Socket REPL! It wraps the call to <code>load-file</code> in logic that looks at the
requested file path and also at the
<code>user.dir</code> JVM property and if the former starts with a drive identifier and <code>:</code>,
and the latter does not, it assumes the REPL is running on WSL on Windows and
maps the file path appropriately.</p>
]]></content>
  </entry>
  
</feed>
