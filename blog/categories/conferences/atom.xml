<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Conferences | An Architect's View]]></title>
  <link href="http://seancorfield.github.io/blog/categories/conferences/atom.xml" rel="self"/>
  <link href="http://seancorfield.github.io/"/>
  <updated>2016-06-17T23:05:50-07:00</updated>
  <id>http://seancorfield.github.io/</id>
  <author>
    <name><![CDATA[Sean Corfield]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Where Did 2015 Go?]]></title>
    <link href="http://seancorfield.github.io/blog/2016/01/03/where-did-2015-go/"/>
    <updated>2016-01-03T08:00:00-08:00</updated>
    <id>http://seancorfield.github.io/blog/2016/01/03/where-did-2015-go</id>
    <content type="html"><![CDATA[<p>I did not intend to stop blogging in 2015 but that&rsquo;s certainly what it looks like here!</p>

<p>So what kept me so busy that I didn&rsquo;t get around to blogging anything?<!-- more --></p>

<p>Almost a year ago, I <a href="http://seancorfield.github.io/blog/2015/02/13/frege-and-clojure/">talked about my Leiningen plugin for Frege</a>. Back then it was version 3.22.367. That plugin is now version 3.23.450 and there&rsquo;s a Leiningen template to go with it, tracking prerelease builds of Frege which I&rsquo;ve been publishing to Sonatype&rsquo;s OSS Snapshots repository.</p>

<pre><code>lein new frege myapp
</code></pre>

<p>That will generate a new, pure Frege project for you to build on. If you want a mixed Frege and Clojure project, like the original concept:</p>

<pre><code>lein new frege myapp -- :with-clojure
</code></pre>

<p>I haven&rsquo;t gotten to work with Frege as much as I&rsquo;d hoped but I managed to contribute ports of two very small Haskell 2010 libraries (<code>System.Environment</code> and <code>System.Exit</code>) as well as exposing a few more pieces of Java&rsquo;s <code>Runtime</code> class in Frege&rsquo;s <code>java.lang.System</code> data type. I hope 2016 will bring a lot more Frege to my life!</p>

<p>In that blog post, I also talked about learning a new language every year. I mentioned <a href="http://elm-lang.org/">Elm</a>: I&rsquo;d experimented with it quite a bit in its early days and I&rsquo;d hoped to continue experimenting, but work and life distracted me from front end concerns and I lost touch with Elm&rsquo;s evolution. All I can say is that Elm continues to go from strength to strength, and it is gaining more press inches and more visibility at conferences, which is all good. It&rsquo;s truly innovative and I want to see it succeed! I did however spend quite a bit of time learning a little <a href="https://www.rust-lang.org">Rust</a> and it makes me wish I did a lot more close-to-the-metal programming: it&rsquo;s a <em>really</em> nice language and the &ldquo;borrowing&rdquo; system is very impressive (even if you find yourself fighting with it a lot at first!).</p>

<p>In the past, I&rsquo;ve also blogged about almost every conference I&rsquo;ve attended so you would be forgiven for thinking I didn&rsquo;t attend any events in 2015. I was able to attend The Strange Loop and Clojure/conj this past year. I would have loved to have attended Clojure/West as <a href="http://clojurewest.org/speakers#fhanreich">my colleague Fumiko gave a talk about HoneySQL</a>. That link will evaporate when this year&rsquo;s conference comes around but you can <a href="https://www.youtube.com/watch?v=alkcjyhesjI">watch Fumiko&rsquo;s talk about HoneySQL</a> on ClojureTV. It was her first ever conference talk and she did a great job &ndash; I&rsquo;m very proud of her! Oh, she also likes Elm.</p>

<p>Fumiko and I worked on a project with ClojureScript, <a href="http://reagent-project.github.io/">Reagent</a> &ndash; a ClojureScript wrapper for <a href="http://facebook.github.io/react/">React.js</a>, and <a href="https://github.com/ptaoussanis/sente">Sente</a> &ndash; core.async over WebSockets. It was a lot of fun and very interesting. It was a proof of concept but, in the end, our company decided to go with JavaScript as being more mainstream (but still with React.js so, win!).</p>

<p><a href="http://www.thestrangeloop.com/">The Strange Loop</a> was its usual amazing self. Alex Miller and his team manage to excel themselves, year-on-year. The keynote talks were <em>phenomenal</em> this year with Idalin Bob&eacute;&rsquo;s inspiring talk about activism and Morgan Marquis-Boire&rsquo;s terrifying security and espionage talk as the highlights of the whole conference. The &ldquo;theme&rdquo; this year was distributed systems. I think this image sums it up well:</p>

<p><img class="center" src="/images/distributed.jpg" width="600" height="450" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The other highlight for me was a social event: the <a href="http://lgbtq.technology/">LGBTQ in Technology Slack</a> dinner, generously sponsored by <a href="https://codeclimate.com/">Code Climate</a>. The Strange Loop team work hard to ensure the conference is a diverse, welcoming, safe space for everyone and I was excited to be able to organize this dinner with the support of the conference organizers.</p>

<p>That social theme continued at <a href="http://clojure-conj.org/">Clojure/conj</a> in Philadelphia where I was able to spend time with more folks from the LGBTQ in Technology Slack community (and had a lovely dinner at <a href="http://www.thetwistedtail.com/">The Twisted Tail</a> with my friend <a href="https://twitter.com/quephird">Danielle</a>. If you&rsquo;re ever in Philly, <em>go to that restaurant</em>!!).</p>

<p>As usual, Clojure/conj was an incredible mix of real world Clojure, academic research, and bleeding edge exploration in industry. One talk made the entire conference worth the cost for me: Bobby Calderwood&rsquo;s <a href="https://www.youtube.com/watch?v=qDNPQo9UmJA">From REST to CQRS</a> with Clojure, Kafka (and Samza), and Datomic. The &ldquo;hallway track&rdquo; that followed this talk caused me to miss the last two talks but it was oh so valuable! Fast forward two months and we&rsquo;re starting down the path of Kafka and distributed systems at work. Priceless, as they say. Other highlights were the father and son Engelbergs on Automata, Ram Krishnan&rsquo;s &ldquo;Clojure for Business Teams&rdquo;, Stuart Halloway&rsquo;s keynote &ldquo;Debugging with the Scientific Method&rdquo; (<em>everyone</em> should watch <a href="https://www.youtube.com/watch?v=FihU5JxmnBg">this talk</a>), Lee Spector&rsquo;s &ldquo;Genetic Programming&rdquo; talk, and Benjamin Pierce&rsquo;s keynote about formal specifications and generative testing.</p>

<p>And then there was work&hellip;</p>

<p>I love my job, I love my team, and we get to solve some fascinating problems at <a href="http://worldsinglesnetworks.com/">World Singles</a>. The company has a history of using <a href="http://www.adobe.com/products/coldfusion-family.html">ColdFusion</a>, although we switched to a Free Open Source Software alternative in 2009 and we&rsquo;ve been running on <a href="http://lucee.org/">Lucee</a> for most of 2015. We started using Clojure in production almost five years ago now (with Clojure 1.3 Alpha 7 or Alpha 8) and we declared it our &ldquo;primary language&rdquo; about a year ago. Since then we&rsquo;ve systematically rewritten code in Clojure as we&rsquo;ve needed to enhance functionality &ndash; definitely a situation where &ldquo;refactor&rdquo; really does mean &ldquo;rewrite&rdquo;. I created a bridge project that allows Cloure to be loaded and run easily inside CFML engines about five years ago and that&rsquo;s continued to evolve. The MVC framework I created in 2009 has continued to evolve as well, with 2015 seeing release 3.1 and 3.5 &ndash; the latter has integrated the Clojure bridge, to enable seamless mixed language projects. We rely heavily on this. Release 4.0 is almost ready for Alpha 1, and focuses on enhancing REST API capabilities.</p>

<p>In addition, we created an OAuth 2 server, mostly in Clojure, to support our REST API, and we&rsquo;ve worked hard to move all of our persistence from CFML&rsquo;s &ldquo;query&rdquo; functionality to a Clojure &ldquo;<a href="https://github.com/seancorfield/datamapper">data mapper</a>&rdquo; based on <a href="http://clojure-doc.org/articles/ecosystem/java_jdbc/home.html">clojure.java.jdbc</a>. We closed out 2015 with <em>all</em> of our persistence handled by Clojure, a big win for performance and maintainability!</p>

<p>Our other big change, coming at the tail end of year, was a switch from <a href="http://leiningen.org/">Leiningen</a> to <a href="http://boot-clj.com/">Boot</a> for our primary Clojure build tool. I&rsquo;ll be blogging about this more in due course, but for now I&rsquo;ll just mention the <a href="https://github.com/seancorfield/boot-expectations">Boot task for running Expectations tests</a> and that Leiningen-style templates will be coming to Boot soon&hellip;</p>

<p>Happy 2016!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Strange Loop 2014]]></title>
    <link href="http://seancorfield.github.io/blog/2014/09/25/the-strange-loop-2014/"/>
    <updated>2014-09-25T18:32:18-07:00</updated>
    <id>http://seancorfield.github.io/blog/2014/09/25/the-strange-loop-2014</id>
    <content type="html"><![CDATA[<p>Last week I attended <a href="https://thestrangeloop.com/">The Strange Loop</a> in St Louis. I attended in 2011 and was blown away. I missed 2012 but attended again in 2013 and was blown away once more. I already have 2015&rsquo;s dates in my calendar. How was 2014?<!-- more --></p>

<p>Yup, blown away again. Alex Miller and his team have created an iconic event that crosses technology boundaries and bridges between academia and industry, to bring some of the brightest minds together to share their ideas. And for attendees too, the opportunity to meet a huge variety of our peers - from novice to expert - in all different technologies, creates an atmosphere of excitement, wonder, and enjoyment.</p>

<p>All the sessions were recorded and have been posted to YouTube. Link at the bottom of this post!</p>

<p>Here are the sessions I attended with brief notes so you can see why I love this conference:</p>

<ul>
<li>Joe Armstrong - The Mess We&rsquo;re In. The creator of Erlang focused on the overwhelming complexity of the systems we are building today, and how they got that way, with a good dose of humor and some quantum mechanics.</li>
<li>Jessica Kerr - Concurrency Options on the JVM. Jessica took us on a whirlwind tour of Clojure, Scala, Java and what they offer the developer (futures, agents, actors, parallel streams, channels, executors etc), with a whimsical (but consistent) analogy of traffic patterns in JVM-town. A great overview with enough detail to be very useful!</li>
<li>Ambrose Bonnaire-Sargeant - Typed Clojure in Practice. We&rsquo;re using core.typed a little at work so I wanted to hear how others were using it in a production environment. After starting out with a practical example of eliminating bugs through gradual typing, Ambrose walked through a case study of CircleCI which has applied core.typed to a substantial amount of their code. It greatly encouraged me!</li>
<li>Julie Lavoie - Analyzing Rap Lyrics with Python. This sounded so off-the-wall I was intrigued - and I&rsquo;m actually a huge fan of early West Coast rap music (although I find the misogyny very hard to take which, again, was something that intrigued me about the talk). Julie&rsquo;s talk looked at numerous pitfalls in the process end-to-end as well as the difficulties in establishing good metrics of sexism. Musical excerpts, lots of data, lots of questions. A fascinating topic!</li>
<li>Amanda Laucher, Paul Snively - Type Systems: The Good, Bad, and Ugly. Honest, opinionated, and somewhat controversial, Amanda and Paul took us on a tour of type systems available in current and future languages. My takeaway: if you don&rsquo;t like static typing, you have probably only used languages with bad or ugly type systems - but we&rsquo;re not quite there yet in terms of capabilities&hellip;</li>
<li>Brian McKenna - Idris: Practical Dependent Types With Practical Examples. &hellip;which was a nice segue into Brian&rsquo;s talk which showed us some of the things that a truly powerful type system can do for us. Idris isn&rsquo;t production-ready yet but it&rsquo;s an exciting glimpse into a future where type systems are powerful, really useful, and relatively painless to use. I&rsquo;ll need to watch this one a few more times, I think.</li>
<li>Leah Hanson - How Julia Goes Fast. I&rsquo;m currently reading <a href="https://pragprog.com/book/7lang/seven-more-languages-in-seven-weeks">Seven More Languages in Seven Weeks</a> and one of those seven is Julia. I haven&rsquo;t gotten to that chapter yet but I wanted to hear more about how it achieves near-C level performance. Leah took us through various implementation details, showing what Julia was capable of. Her passion for Julia was contagious and I&rsquo;m really looking forward to that chapter now!</li>
<li>Stefanie Schirmer - Dynamic Programming at Ease: with Grammars, Algebras, Products. Stefanie showed us a very powerful set of abstractions that can tame a very difficult type of programming algorithm, with reference to real-world analysis of RNA molecules. Like Brian&rsquo;s talk on Idris, I&rsquo;ll need to watch this a few more times to soak it all in.</li>
<li>Stephen Wolfram - Inside the Wolfram Language. Wolfram is a system that has grown to encompass a huge amount of knowledge across many different disciplines, and Stephen was able to give us a preview of their brand new &ldquo;programming language&rdquo; that can query their (very impressive) knowledge engine. Highly entertaining - make sure you watch the video!</li>
<li>Eleanor McHugh - Fun with Go (Unsession). Several friends have raved about Go so, before the conference, I installed it and worked through the built-in &ldquo;Tour of Go&rdquo; and learned a little of the language. In fifty minutes of fun and increasingly wild and wacky code, Eleanor taught me a lot more of Go than the official tour. I found myself repeatedly thinking &ldquo;Wow! I didn&rsquo;t know Go could do that!&rdquo;.</li>
<li>Nada Amin - Programming Should Eat Itself. Meta-turtles, all the way down. Nada explored reflective metaprogramming. I wasn&rsquo;t sure of the &ldquo;why&rdquo; behind this talk, but she proved that the way to really understand an academic computer science paper is to implement the ideas in it yourself.</li>
<li>Evan Czaplicki - Controlling Space and Time: understanding the many formulations of FRP. Evan created the <a href="http://elm-lang.org">Elm programming language</a> as an embodiment of Functional Reactive Programming &ldquo;done right&rdquo;, so I was very interested to get the &ldquo;big picture&rdquo; on this space. Great background for the different types of FRP out there.</li>
<li>Bodil Stokke - PureScript (Maybe This Time We Get JavaScript Right). Bodil was highly entertaining as always, this time live programming a game in PureScript, a Haskell-like language that compiled down to JavaScript. Although it has many surface similarities to Elm, it is a much more lightweight system, which she needed for her use case. Interestingly, she has built a library in PureScript that provides some of Elm&rsquo;s elegant Signal semantics (which she will hopefully open source soon!).</li>
<li>Rich Hickey - Transducers. Drawing parallels with how we describe processes in the real world - as a series of steps to be performed together - Rich showed how transducers allow us to describe processes in Clojure, without needing to specify the format of inputs, outputs, or intermediate results. Coming soon to a Clojure release near you (it&rsquo;s in 1.7.0-alpha2 already).</li>
<li>Ian Davis - The challenges and benefits of a functional reactive frontend. Ian described Prismatic&rsquo;s experiences with a large-scale interactive web application that is built with ClojureScript and Om on top of Facebook&rsquo;s React.js framework. Real world FRP at scale.</li>
<li>Heather Miller - Function Passing Style: Typed, Distributed Functional Programming. The actor model allows use to perform distributed processing by sending data to nodes and getting results back. Heather talk looked at a different model where the data is distributed (rather than the processing) and you send your functions out to the data instead. Having played with distributed function execution in a cluster of Hazelcast nodes, I was left thinking &ldquo;So?&rdquo; but the emphasis on type systems and immutability means I probably missed something important in her talk so I&rsquo;ll have to watch it again.</li>
<li>Elise Huard - Writing a Game in Haskell. I hadn&rsquo;t considered Haskell as a language for writing games but Elise used it to showcase Functional Reactive Programming as the core of her game&rsquo;s engine. She had embarked on the project for a bit of fun and she shared the whole journey with us, from initial curiosity about games, to design, to multiple implementations and the challenges and paths not taken along the way, to the finished game - and a <a href="https://leanpub.com/gameinhaskell">forthcoming book about her experiences</a>.</li>
<li>Aditya Siram - Shen: A Sufficiently Advanced Lisp. Aditya showed us some of Shen&rsquo;s power - building on traditional Lisp values with a powerful macro system and a powerful type system - producing very elegant solutions.</li>
</ul>


<p>Big trends this year? Functional Reactive Programming (in the real world), and Advanced Type Systems (coming soon?).</p>

<p>One final note on the conference: I picked topics that interested / intrigued me without paying much attention to the speakers (because, with a handful of exceptions, I don&rsquo;t recognize most of the speakers listed anyway!) and now I see that over half of the sessions I attended had women speakers. As I noted last year, Alex Miller and his team did a terrific job of <a href="http://corfield.org/blog/post.cfm/the-strange-loop-2013">ensuring a diverse speaker lineup</a> - and did it again this year! I&rsquo;ve been reading some great blog posts from people who attended the conference this year on the <a href="https://thestrangeloop.com/news/doubling-down-on-diversity">diversity scholarships</a> that were set up. It shows that we <em>can</em> change things if we try. We still have a long way to go for equality in tech, but The Strange Loop is a great model for us in that area.</p>

<p>You can watch all of these sessions for free now, on <a href="https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw">The Strange Loop 2014 YouTube channel</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powered by JavaScript]]></title>
    <link href="http://seancorfield.github.io/blog/2014/09/20/powered-by-javascript/"/>
    <updated>2014-09-20T20:03:15-07:00</updated>
    <id>http://seancorfield.github.io/blog/2014/09/20/powered-by-javascript</id>
    <content type="html"><![CDATA[<p>The first annual <a href="http://www.manning.com/poweredbyjavascript/">Powered by JavaScript</a> conference, organized by <a href="http://www.manning.com/">Manning Books</a>, took place in St Louis this past week. How did this inaugural event work for someone like me who really doesn&rsquo;t JavaScript?<!-- more --></p>

<p>I&rsquo;m fairly public about my dislike of JavaScript - and it&rsquo;s an easy language to take pot shots at. Indeed, in the following two days of <a href="https://thestrangeloop.com/">The Strange Loop</a> conference, several speakers reminded us why JavaScript&rsquo;s flaws have led to so much innovation in both the compile-to-JS (&ldquo;altJS&rdquo;) and the native JS framework space. Despite the (many) flaws, JS is ubiquitous and has evolved from a hastily constructed scripting engine to become the powerhouse of the modern web and with Node.js has moved into the server side development space and as a common part of a build chain that touches almost every web development shop, regardless of their core technology.</p>

<p>The conference opened with keynotes from Dan Shaw about Node.js and Tomomi Imura about the state of the mobile web. Tomomi&rsquo;s keynote was particularly interesting, as she went through the evolution of mobile browsers in detail, looking at features and releases of Chrome, Firefox, Opera, Safari, and Internet Explorer, as well as some of the politics behind the modern &ldquo;browser wars&rdquo;. I always enjoy a keynote that teaches me something practical I can use as well as providing inspiration, and Tomomi scored on both.</p>

<p>Since this was the first year of the conference, I had signed up long before I knew how the schedule would pan out and as the number of speakers announced continued to grow, I was wondering how they would fit everyone into a one day event. The answer turned out to be three tracks of seven sessions each, which made for a lot of difficult choices. Here&rsquo;s what I chose to attend:</p>

<ul>
<li>Steven Luscher - Decomplexifying UI Code with React. Steven did a great job of explaining the motivations and concepts behind React.js. We&rsquo;re just starting to use React.js at World Singles, for an internal application, albeit wrapped up in a ClojureScript framework and I haven&rsquo;t had to suffer through the pain of large-scale JS development, so it was very interesting to hear <em>why</em> this approach helps - declarative and reactive.</li>
<li>Josh Powell - Unravelling the Knot: Client &amp; Testable Client Side Code. One of the authors of &ldquo;<a href="http://www.manning.com/mikowski/">Single Page Web Applications</a>&rdquo;, Josh walked us through a relatively simple example that showed how data dependencies quickly build up and can lead to bugs and offered us a design pattern to address this: a central data store that is updated by all components and which shifts dependencies from a web of component-to-component to a hub'n'spoke architecture of component-to-data. For me it was a nice follow-on from Steven&rsquo;s talk which also dealt with the complexity of dependencies.</li>
<li>Sarah Groff-Palermo - Art.js: Transfigure Data to Create 21st Century Art. Time for a complete shift of gears with a talk that covered emotion and whimsy and what can be grown out of fragmented data with a variety of JS tools and frameworks and some creativity. It was a very engaging talk and it inspires me to be more experimental with some of the visualization tools that I&rsquo;d like to play with but have previously been intimidated by.</li>
<li>Brian Lonsdorf - Fact, Fiction, &amp; Functional Programming. After lunch, Brian took us on a whirlwind tour of monads, functors, and point-free programming in JavaScript, using a web application written in a nearly pure functional style. I was impressed at how far this sort of thing has come in JS, with things like <a href="https://github.com/CrossEye/ramda">Project Ramda</a>!</li>
<li>Mike Mikowksi - Dump Less and SASS: Dynamic CSS Manipulation with JavaScript. This was the real dud of the day. The other author of Single Page Web Applications, Mike was far more interested in telling us how clever he was and how lucky we were to have chosen his session (seriously dude?) than actually showing us anything useful. He made at least one sexist joke, and several other very dodgy comments, and came off as an arrogant jerk. I&rsquo;d heard complaints about his arrogant, sexist behavior in the bar the previous night but was still intrigued by the topic - unfortunately it was a waste of time.</li>
<li>Trek Glowacki - Single Page Applications: The Web&rsquo;s Horseless Carriage. After the break, the conference got back on track with a fascinating look at the evolution of web applications and how we talk about them, positing that &ldquo;Single Page Web Application&rdquo; is a term that indicates we don&rsquo;t really have a handle on what this space is really about - and what it will become.</li>
<li>Marcus Kobler - React.js and the Importance of Isomorphic SPAs. For the last session of the day, I chose another React.js session and it was another good choice. Marcus dug into React.js in more detail than Steven so it was a good progression and I hadn&rsquo;t heard about &ldquo;Isomorphic JavaScript&rdquo; before so that was yet another topic to Google and add pages to <a href="http://getpocket.com/">Pocket</a> for later reading!</li>
</ul>


<p>Manning made an excellent choice to close out the conference with a roundtable of JavaScript experts playing what turned out to be a hilarious version of The Newlywed Game which touched on the good and the bad in JavaScript.</p>

<p>In addition, Manning set up a comprehensive library of their books in the lobby of the conference and selected various tweets they liked throughout the day to award free books. I picked up &ldquo;Java 8 in Action&rdquo; for one of my tweets - and I&rsquo;d signed up early enough to get &ldquo;Single Page Web Applications&rdquo; as well as a registration gift so I was very happy with that.</p>

<p>Watch out for Powered by JavaScript 2015!</p>
]]></content>
  </entry>
  
</feed>
